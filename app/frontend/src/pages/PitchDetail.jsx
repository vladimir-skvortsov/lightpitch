import { useState, useEffect, useCallback } from 'react'
import { useParams, Link, useNavigate } from 'react-router-dom'
import './PitchDetail.scss'

const PitchDetail = () => {
  const { id } = useParams()
  const navigate = useNavigate()
  const [pitch, setPitch] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    fetchPitch()
  }, [fetchPitch, id])

  const fetchPitch = useCallback(async () => {
    try {
      setLoading(true)
      const response = await fetch(`http://localhost:8000/api/v1/pitches/${id}`)

      if (!response.ok) {
        throw new Error('–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      }

      const data = await response.json()
      setPitch(data)
    } catch (err) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }, [id])

  const handleDelete = useCallback(async () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ?')) {
      try {
        const response = await fetch(`http://localhost:8000/api/v1/pitches/${id}`, {
          method: 'DELETE',
        })

        if (response.ok) {
          navigate('/')
        } else {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è')
        }
      } catch (err) {
        setError(err.message)
      }
    }
  }, [id, navigate])

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    })
  }

  if (loading) {
    return (
      <main className='main'>
        <div className='container'>
          <div className='loading'>
            <div className='spinner'></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è...</p>
          </div>
        </div>
      </main>
    )
  }

  if (error) {
    return (
      <main className='main'>
        <div className='container'>
          <div className='error'>
            <p>‚ö†Ô∏è {error}</p>
            <Link to='/' className='btn-primary'>
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </Link>
          </div>
        </div>
      </main>
    )
  }

  return (
    <main className='main'>
      <div className='container'>
        <div className='content-header'>
          <Link to='/' className='btn-outline'>
            ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
          </Link>
          <div className='pitch-actions'>
            <Link to={`/pitch/${id}/edit`} className='btn-outline'>
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Link>
            <button onClick={handleDelete} className='btn-danger'>
              –£–¥–∞–ª–∏—Ç—å
            </button>
          </div>
        </div>

        {pitch && (
          <div className='pitch-detail'>
            <div className='pitch-detail-header'>
              <h1 className='pitch-detail-title'>{pitch.title}</h1>
              <span className='pitch-detail-date'>–°–æ–∑–¥–∞–Ω–æ: {formatDate(pitch.created_at)}</span>
              {pitch.updated_at !== pitch.created_at && (
                <span className='pitch-detail-date'>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatDate(pitch.updated_at)}</span>
              )}
            </div>

            {pitch.description && (
              <div className='pitch-detail-description'>
                <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                <p>{pitch.description}</p>
              </div>
            )}

            {pitch.tags && pitch.tags.length > 0 && (
              <div className='pitch-detail-tags'>
                <h3>–¢–µ–≥–∏</h3>
                <div className='pitch-tags'>
                  {pitch.tags.map((tag, index) => (
                    <span key={index} className='tag'>
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            )}

            <div className='pitch-detail-content'>
              <h3>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è</h3>
              <div className='pitch-content'>
                {pitch.content.split('\n').map((paragraph, index) => (
                  <p key={index}>{paragraph}</p>
                ))}
              </div>
            </div>

            <div className='pitch-detail-actions'>
              <button className='btn-primary btn-large'>üé§ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</button>
              <button className='btn-secondary'>üìä –ê–Ω–∞–ª–∏–∑ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è</button>
            </div>
          </div>
        )}
      </div>
    </main>
  )
}

export default PitchDetail
